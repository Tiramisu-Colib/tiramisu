
 tiramisu::computation C_init("C_init", {i}, (i));

    tiramisu::computation S0 ("S0",{j0},tiramisu::p_int32) ;
    S0.set_expression( S0(j0-1) + S0(j0+1)+S0(j0) ) ;


  the referencing union map is : { S0[j0] -> S0[j0' = 1 + j0]; S0[j0] -> S0[j0' = -1 + j0]; S0[j0] -> C_init[i = j0] }
|   using to generate time stamp tmp map [t0,t1,t2,t3]->[t0,t1,t2,t3]
|    - > compuatation's schedule to time stamp op result is : { C_init[t1] -> [0, 0, t1, 0] : 0 <= t1 <= 99 }
|    - > compuatation's schedule to time stamp op result is : { S0[t3] -> [0, 10, t3, 0] : 0 < t3 <= 98 }
|   the overall function schedule is : { S0[t3] -> [0, 10, t3, 0] : 0 < t3 <= 98; C_init[t1] -> [0, 0, t1, 0] : 0 <= t1 <= 99 }
|   the write access for computations is : { S0[j0] -> b_output[j0' = j0]; C_init[i] -> b_output[i' = i] }
|    The read access for computations : { S0[j0] -> b_output[j0' = 1 + j0]; S0[j0] -> b_output[j0' = j0]; S0[j0] -> b_output[j0' = -1 + j0] }
|    dependency analysis result  : { 

must_dependence: "{ C_init[t1] -> [S0[t3 = t1] -> b_output[j0 = t1]] : 0 < t1 <= 98; 
C_init[t1] -> [S0[t3 = -1 + t1] -> b_output[j0 = t1]] : 2 <= t1 <= 99; 
C_init[t1 = 0] -> [S0[t3 = 1] -> b_output[j0 = 0]]; S0[t3] -> [S0[t3' = 1 + t3] -> b_output[j0 = t3]] : 0 < t3 <= 97 }", 

may_dependence: "{ C_init[t1] -> [S0[t3 = t1] -> b_output[j0 = t1]] : 0 < t1 <= 98; C_init[t1] -> [S0[t3 = -1 + t1] -> b_output[j0 = t1]] : 2 <= t1 <= 99; C_init[t1 = 0] -> [S0[t3 = 1] -> b_output[j0 = 0]]; S0[t3] -> [S0[t3' = 1 + t3] -> b_output[j0 = t3]] : 0 < t3 <= 97 }", must_no_source: "{  }", may_no_source: "{  }" }

simple case 2 :


     tiramisu::computation C_init("C_init", {}, (1));

    tiramisu::computation S0 ("S0",{},C_init(0)+1 ) ;

{ must_dependence: "{ C_init[t2 = 0] -> [S0[t5 = 0] -> b_output[t1 = 0]] }", may_dependence: "{ C_init[t2 = 0] -> [S0[t5 = 0] -> b_output[t1 = 0]] }", must_no_source: "{  }", may_no_source: "{  }" }


simple case 3 :

  b_output[0] = 1
  b_output[0] = (b_output[0] + 1)
  b_output[0] = 1
  b_output[0] = (b_output[0] + 1)	

  the referencing union map is : { S0[t4] -> C_init[t1 = 0]; S02[t10] -> C_init[t1 = 0] }
|   using to generate time stamp tmp map [t0,t1,t2,t3]->[t0,t1,t2,t3]
|    - > compuatation's schedule to time stamp op result is : { C_init[t2 = 0] -> [0, 0, 0, 0] }
|    - > compuatation's schedule to time stamp op result is : { S0[t5 = 0] -> [0, 10, 0, 0] }
|    - > compuatation's schedule to time stamp op result is : { C_init2[t8 = 0] -> [0, 20, 0, 0] }
|    - > compuatation's schedule to time stamp op result is : { S02[t11 = 0] -> [0, 30, 0, 0] }
|   the overall function schedule is : { S0[t5 = 0] -> [0, 10, 0, 0]; C_init[t2 = 0] -> [0, 0, 0, 0]; C_init2[t8 = 0] -> [0, 20, 0, 0]; S02[t11 = 0] -> [0, 30, 0, 0] }
|   the write access for computations is : { S0[t4] -> b_output[t4' = t4]; S02[t10] -> b_output[t10' = t10]; C_init2[t7] -> b_output[t7' = t7]; C_init[t1] -> b_output[t1' = t1] }
|    The read access for computations : { S0[t4] -> b_output[t1 = 0]; S02[t10] -> b_output[t1 = 0] }
|    dependency analysis result  : { must_dependence: "{ C_init2[t8 = 0] -> [S02[t11 = 0] -> b_output[t1 = 0]]; C_init[t2 = 0] -> [S0[t5 = 0] -> b_output[t1 = 0]] }", may_dependence: "{ C_init[t2 = 0] -> [S0[t5 = 0] -> b_output[t1 = 0]]; C_init2[t8 = 0] -> [S02[t11 = 0] -> b_output[t1 = 0]] }", must_no_source: "{  }", may_no_source: "{  }" }
[gen_ordering_schedules function]






